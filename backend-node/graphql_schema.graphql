type Query {
  me: User!
  accounts: [Account!]!
  account(id: ID!): Account
  bankTransactions: [BankTransaction!]!
  bankTransaction(id: ID!): BankTransaction
  columnMappings: [ColumnMapping!]!
  columnMapping(id: ID!): ColumnMapping
  expenses: [Expense!]!
  expense(id: ID!): Expense
  frequencyDetails: [FrequencyDetail!]!
  frequencyDetail(id: ID!): FrequencyDetail
  importFiles: [ImportFile!]!
  importFile(id: ID!): ImportFile
  frequencies: [Frequency!]!
  frequency(id: ID!): Frequency
  incomes: [Income!]!
  income(id: ID!): Income
  transactionMatches: [TransactionMatch!]!
  transactionMatch(id: ID!): TransactionMatch
}

type Mutation {
  login(email: String!, password: String!): AuthPayload!
  createUser(input: CreateUserInput!): AuthPayload!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): DeleteResponse!
  createAccount(input: CreateAccountInput!): Account!
  updateAccount(id: ID!, input: UpdateAccountInput!): Account!
  deleteAccount(id: ID!): DeleteResponse!
  uploadBankTransactions(transactions: [CreateBankTransactionInput!]!): [BankTransaction!]!
  createBankTransaction(input: CreateBankTransactionInput!): BankTransaction!
  updateBankTransaction(id: ID!, input: UpdateBankTransactionInput!): BankTransaction!
  deleteBankTransaction(id: ID!): Boolean!
  createColumnMapping(input: CreateColumnMappingInput!): ColumnMapping!
  updateColumnMapping(id: ID!, input: UpdateColumnMappingInput!): ColumnMapping!
  deleteColumnMapping(id: ID!): Boolean!
  createExpense(input: CreateExpenseInput!): Expense!
  updateExpense(id: ID!, input: UpdateExpenseInput!): Expense!
  deleteExpense(id: ID!): Boolean!
  createFrequencyDetail(input: CreateFrequencyDetailInput!): FrequencyDetail!
  updateFrequencyDetail(id: ID!, input: UpdateFrequencyDetailInput!): FrequencyDetail!
  deleteFrequencyDetail(id: ID!): Boolean!
  createImportFile(input: CreateImportFileInput!): ImportFile!
  updateImportFile(id: ID!, input: UpdateImportFileInput!): ImportFile!
  deleteImportFile(id: ID!): DeleteResponse!
  createFrequency(input: CreateFrequencyInput!): Frequency!
  updateFrequency(id: ID!, input: UpdateFrequencyInput!): Frequency!
  deleteFrequency(id: ID!): DeleteResponse!
  createIncome(input: CreateIncomeInput!): Income!
  updateIncome(id: ID!, input: UpdateIncomeInput!): Income!
  deleteIncome(id: ID!): Boolean!
  createTransactionMatch(input: CreateTransactionMatchInput!): TransactionMatch!
  updateTransactionMatch(id: ID!, input: UpdateTransactionMatchInput!): TransactionMatch!
  deleteTransactionMatch(id: ID!): Boolean!
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  google_id: String!
  accounts: [Account!]!
  incomes: [Income!]!
  expenses: [Expense!]!
  bankTransactions: [BankTransaction!]!
  importFiles: [ImportFile!]!
  columnMappings: [ColumnMapping!]!
  transactionMatches: [TransactionMatch!]!
  frequencyDetails: [FrequencyDetail!]!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  google_id: String
}

input UpdateUserInput {
  name: String
}

type AuthPayload {
  user: User!
  token: String!
}

type DeleteResponse {
  success: Boolean!
  message: String!
}

type Account {
  id: ID!
  user_id: ID!
  account_bank_name: String
  nickname: String!
  beg_balance: Float!
  bank_url: String
  target_goal: Float
  goal_date: String
  track_spending: Boolean!
  is_active: Boolean!
  user: User!
  incomingIncomes: [Income!]!
  outgoingExpenses: [Expense!]!
  incomingRefunds: [Expense!]!
  plannedExpenses: [Expense!]!
  outgoingTransactions: [BankTransaction!]!
  incomingTransactions: [BankTransaction!]!
}

input CreateAccountInput {
  user_id: ID!
  account_bank_name: String
  nickname: String!
  beg_balance: Float!
  bank_url: String
  target_goal: Float
  goal_date: String
  track_spending: Boolean!
}

input UpdateAccountInput {
  account_bank_name: String
  nickname: String
  beg_balance: Float
  bank_url: String
  target_goal: Float
  goal_date: String
  track_spending: Boolean!
  is_active: Boolean!
}

type BankTransaction {
  id: ID!
  user_id: ID!
  account_id: ID!
  date: String!
  amount: Float!
  default_category: String
  description1: String!
  description2: String
  description3: String
  description4: String
  user: User!
  fromAccount: Account!
  toAccount: Account!
  transactionMatches: [TransactionMatch!]!
}

input CreateBankTransactionInput {
  user_id: ID!
  account_id: ID!
  date: String!
  amount: Float!
  default_category: String
  description1: String!
  description2: String
  description3: String
  description4: String
}

input UpdateBankTransactionInput {
  account_id: ID!
  date: String!
  amount: Float!
  default_category: String
  description1: String!
  description2: String
  description3: String
  description4: String
}

enum ColumnMappingType {
  ID
  AMOUNT
  CREDIT
  DEBIT
  TRANSACTION_TYPE
  DATE
  ACCOUNT_NICKNAME
  DESCRIPTION1
  DESCRIPTION2
  DESCRIPTION3
  DESCRIPTION4
  DEFAULT_CATEGORY
}

type ColumnMapping {
  id: ID!
  user_id: ID!
  import_file_id: ID!
  column_name: String!
  mapped_to: ColumnMappingType!
  user: User!
  importFile: ImportFile!
}

input CreateColumnMappingInput {
  user_id: ID!
  import_file_id: ID!
  column_name: String!
  mapped_to: ColumnMappingType!
}

input UpdateColumnMappingInput {
  import_file_id: ID!
  column_name: String!
  mapped_to: ColumnMappingType!
}

type Expense {
  id: ID!
  user_id: ID!
  from_account_id: ID!
  to_account_id: ID!
  frequency_id: ID!
  plan_account_id: ID!
  plan_frequency_id: ID!
  plan_income_id: ID!
  pay_to: String!
  amount: Float!
  start_date: String!
  next_due_date: String!
  end_date: String!
  user: User!
  fromAccount: Account!
  toAccount: Account!
  frequency: Frequency!
  planningAccount: Account!
  planningFrequency: Frequency!
  planningIncome: Income!
  transactionMatches: [TransactionMatch!]!
  frequencyDetails: [FrequencyDetail!]!
}

input CreateExpenseInput {
  user_id: ID!
  from_account_id: ID!
  to_account_id: ID!
  frequency_id: ID!
  plan_account_id: ID!
  plan_frequency_id: ID!
  plan_income_id: ID!
  pay_to: String!
  amount: Float!
  start_date: String!
  next_due_date: String!
  end_date: String!
}

input UpdateExpenseInput {
  from_account_id: ID!
  to_account_id: ID!
  frequency_id: ID!
  plan_account_id: ID!
  plan_frequency_id: ID!
  plan_income_id: ID!
  pay_to: String!
  amount: Float!
  start_date: String!
  next_due_date: String!
  end_date: String!
}

type FrequencyDetail {
  id: ID!
  user_id: ID!
  frequency_id: ID!
  expense_id: ID
  income_id: ID
  day_of_month: [Int]
  week_of_month: [Int]
  day_of_week: [Int]
  special_day: String
  user: User!
  frequency: Frequency!
  expense: Expense!
  income: Income!
}

input CreateFrequencyDetailInput {
  user_id: ID!
  frequency_id: ID!
  expense_id: ID
  income_id: ID
  day_of_month: [Int]
  week_of_month: [Int]
  day_of_week: [Int]
  special_day: String
}

input UpdateFrequencyDetailInput {
  frequency_id: ID!
  expense_id: ID
  income_id: ID
  day_of_month: [Int]
  week_of_month: [Int]
  day_of_week: [Int]
  special_day: String
}

type ImportFile {
  id: ID!
  user_id: ID!
  file_path: String!
  has_account_column: Boolean!
  account_nickname: String
  user: User!
  columnMappings: [ColumnMapping!]!
}

input CreateImportFileInput {
  user_id: ID!
  file_path: String!
  has_account_column: Boolean!
  account_nickname: String
}

input UpdateImportFileInput {
  file_path: String!
  has_account_column: Boolean!
  account_nickname: String
}

type Frequency {
  id: ID!
  description: String!
  interval: Int!
  day_of_month: String!
  week_of_month: String
  day_of_week: String
  special_day: String
  callback_func_name: String!
  incomes: [Income!]!
  expenses: [Expense!]!
  plannedExpenses: [Expense!]!
  frequencyDetails: [FrequencyDetail!]!
}

input CreateFrequencyInput {
  description: String!
  interval: Int!
  day_of_month: String!
  week_of_month: String
  day_of_week: String
  special_day: String
  callback_func_name: String!
}

input UpdateFrequencyInput {
  description: String!
  interval: Int!
  day_of_month: String!
  week_of_month: String
  day_of_week: String
  special_day: String
  callback_func_name: String!
}

type Income {
  id: ID!
  user_id: ID!
  frequency_id: ID!
  account_id: ID!
  description: String!
  start_date: String!
  end_date: String
  salary_amount: Float
  num_hours: Int
  rate_per_hour: Float
  set_amount: Float
  user: User!
  frequency: Frequency!
  account: Account!
  plannedExpenses: [Expense!]!
  transactionMatches: [TransactionMatch!]!
  frequencyDetails: [FrequencyDetail!]!
}

input CreateIncomeInput {
  user_id: ID!
  frequency_id: ID!
  account_id: ID!
  description: String!
  start_date: String!
  end_date: String
  salary_amount: Float
  num_hours: Int
  rate_per_hour: Float
  set_amount: Float
}

input UpdateIncomeInput {
  frequency_id: ID!
  account_id: ID!
  description: String!
  start_date: String!
  end_date: String
  salary_amount: Float
  num_hours: Int
  rate_per_hour: Float
  set_amount: Float
}

type TransactionMatch {
  id: ID!
  user_id: ID!
  bank_transaction_id: String!
  expense_id: ID!
  income_id: ID!
  match_date: String!
  amount_matched: Float
  user: User!
  bankTransaction: BankTransaction!
  expense: Expense!
  income: Income!
}

input CreateTransactionMatchInput {
  user_id: ID!
  bank_transaction_id: String!
  expense_id: ID!
  income_id: ID!
  match_date: String!
  amount_matched: Float
}

input UpdateTransactionMatchInput {
  bank_transaction_id: String!
  expense_id: ID!
  income_id: ID!
  match_date: String!
  amount_matched: Float
}