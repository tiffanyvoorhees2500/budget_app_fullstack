# generated by datamodel-codegen:
#   filename:  graphql_schema.graphql
#   timestamp: 2025-09-18T20:09:43+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Literal, Optional, TypeAlias

from pydantic import BaseModel, Field

Boolean: TypeAlias = bool
"""
The `Boolean` scalar type represents `true` or `false`.
"""


Float: TypeAlias = float
"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""


ID: TypeAlias = str
"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""


Int: TypeAlias = int
"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""


String: TypeAlias = str
"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""


class ColumnMappingType(Enum):
    ACCOUNT_NICKNAME = 'ACCOUNT_NICKNAME'
    AMOUNT = 'AMOUNT'
    CREDIT = 'CREDIT'
    DATE = 'DATE'
    DEBIT = 'DEBIT'
    DEFAULT_CATEGORY = 'DEFAULT_CATEGORY'
    DESCRIPTION1 = 'DESCRIPTION1'
    DESCRIPTION2 = 'DESCRIPTION2'
    DESCRIPTION3 = 'DESCRIPTION3'
    DESCRIPTION4 = 'DESCRIPTION4'
    ID = 'ID'
    TRANSACTION_TYPE = 'TRANSACTION_TYPE'


class Account(BaseModel):
    account_bank_name: Optional[String] = None
    bank_url: Optional[String] = None
    beg_balance: Float
    goal_date: Optional[String] = None
    id: ID
    incomingIncomes: List[Income]
    incomingRefunds: List[Expense]
    incomingTransactions: List[BankTransaction]
    is_active: Boolean
    nickname: String
    outgoingExpenses: List[Expense]
    outgoingTransactions: List[BankTransaction]
    plannedExpenses: List[Expense]
    target_goal: Optional[Float] = None
    track_spending: Boolean
    user: User
    user_id: ID
    typename__: Optional[Literal['Account']] = Field('Account', alias='__typename')


class AuthPayload(BaseModel):
    token: String
    user: User
    typename__: Optional[Literal['AuthPayload']] = Field(
        'AuthPayload', alias='__typename'
    )


class BankTransaction(BaseModel):
    account_id: ID
    amount: Float
    date: String
    default_category: Optional[String] = None
    description1: String
    description2: Optional[String] = None
    description3: Optional[String] = None
    description4: Optional[String] = None
    fromAccount: Account
    id: ID
    toAccount: Account
    transactionMatches: List[TransactionMatch]
    user: User
    user_id: ID
    typename__: Optional[Literal['BankTransaction']] = Field(
        'BankTransaction', alias='__typename'
    )


class ColumnMapping(BaseModel):
    column_name: String
    id: ID
    importFile: ImportFile
    import_file_id: ID
    mapped_to: ColumnMappingType
    user: User
    user_id: ID
    typename__: Optional[Literal['ColumnMapping']] = Field(
        'ColumnMapping', alias='__typename'
    )


class DeleteResponse(BaseModel):
    message: String
    success: Boolean
    typename__: Optional[Literal['DeleteResponse']] = Field(
        'DeleteResponse', alias='__typename'
    )


class Expense(BaseModel):
    amount: Float
    end_date: String
    frequency: Frequency
    frequencyDetails: List[FrequencyDetail]
    frequency_id: ID
    fromAccount: Account
    from_account_id: ID
    id: ID
    next_due_date: String
    pay_to: String
    plan_account_id: ID
    plan_frequency_id: ID
    plan_income_id: ID
    planningAccount: Account
    planningFrequency: Frequency
    planningIncome: Income
    start_date: String
    toAccount: Account
    to_account_id: ID
    transactionMatches: List[TransactionMatch]
    user: User
    user_id: ID
    typename__: Optional[Literal['Expense']] = Field('Expense', alias='__typename')


class Frequency(BaseModel):
    callback_func_name: String
    day_of_month: String
    day_of_week: Optional[String] = None
    description: String
    expenses: List[Expense]
    frequencyDetails: List[FrequencyDetail]
    id: ID
    incomes: List[Income]
    interval: Int
    plannedExpenses: List[Expense]
    special_day: Optional[String] = None
    week_of_month: Optional[String] = None
    typename__: Optional[Literal['Frequency']] = Field('Frequency', alias='__typename')


class FrequencyDetail(BaseModel):
    day_of_month: Optional[List[Optional[Int]]] = None
    day_of_week: Optional[List[Optional[Int]]] = None
    expense: Expense
    expense_id: Optional[ID] = None
    frequency: Frequency
    frequency_id: ID
    id: ID
    income: Income
    income_id: Optional[ID] = None
    special_day: Optional[String] = None
    user: User
    user_id: ID
    week_of_month: Optional[List[Optional[Int]]] = None
    typename__: Optional[Literal['FrequencyDetail']] = Field(
        'FrequencyDetail', alias='__typename'
    )


class ImportFile(BaseModel):
    account_nickname: Optional[String] = None
    columnMappings: List[ColumnMapping]
    file_path: String
    has_account_column: Boolean
    id: ID
    user: User
    user_id: ID
    typename__: Optional[Literal['ImportFile']] = Field(
        'ImportFile', alias='__typename'
    )


class Income(BaseModel):
    account: Account
    account_id: ID
    description: String
    end_date: Optional[String] = None
    frequency: Frequency
    frequencyDetails: List[FrequencyDetail]
    frequency_id: ID
    id: ID
    num_hours: Optional[Int] = None
    plannedExpenses: List[Expense]
    rate_per_hour: Optional[Float] = None
    salary_amount: Optional[Float] = None
    set_amount: Optional[Float] = None
    start_date: String
    transactionMatches: List[TransactionMatch]
    user: User
    user_id: ID
    typename__: Optional[Literal['Income']] = Field('Income', alias='__typename')


class TransactionMatch(BaseModel):
    amount_matched: Optional[Float] = None
    bankTransaction: BankTransaction
    bank_transaction_id: String
    expense: Expense
    expense_id: ID
    id: ID
    income: Income
    income_id: ID
    match_date: String
    user: User
    user_id: ID
    typename__: Optional[Literal['TransactionMatch']] = Field(
        'TransactionMatch', alias='__typename'
    )


class User(BaseModel):
    accounts: List[Account]
    bankTransactions: List[BankTransaction]
    columnMappings: List[ColumnMapping]
    email: String
    expenses: List[Expense]
    frequencyDetails: List[FrequencyDetail]
    google_id: String
    id: ID
    importFiles: List[ImportFile]
    incomes: List[Income]
    name: String
    password: String
    transactionMatches: List[TransactionMatch]
    typename__: Optional[Literal['User']] = Field('User', alias='__typename')


class CreateAccountInput(BaseModel):
    account_bank_name: Optional[String] = None
    bank_url: Optional[String] = None
    beg_balance: Float
    goal_date: Optional[String] = None
    nickname: String
    target_goal: Optional[Float] = None
    track_spending: Boolean
    user_id: ID
    typename__: Optional[Literal['CreateAccountInput']] = Field(
        'CreateAccountInput', alias='__typename'
    )


class CreateBankTransactionInput(BaseModel):
    account_id: ID
    amount: Float
    date: String
    default_category: Optional[String] = None
    description1: String
    description2: Optional[String] = None
    description3: Optional[String] = None
    description4: Optional[String] = None
    user_id: ID
    typename__: Optional[Literal['CreateBankTransactionInput']] = Field(
        'CreateBankTransactionInput', alias='__typename'
    )


class CreateColumnMappingInput(BaseModel):
    column_name: String
    import_file_id: ID
    mapped_to: ColumnMappingType
    user_id: ID
    typename__: Optional[Literal['CreateColumnMappingInput']] = Field(
        'CreateColumnMappingInput', alias='__typename'
    )


class CreateExpenseInput(BaseModel):
    amount: Float
    end_date: String
    frequency_id: ID
    from_account_id: ID
    next_due_date: String
    pay_to: String
    plan_account_id: ID
    plan_frequency_id: ID
    plan_income_id: ID
    start_date: String
    to_account_id: ID
    user_id: ID
    typename__: Optional[Literal['CreateExpenseInput']] = Field(
        'CreateExpenseInput', alias='__typename'
    )


class CreateFrequencyDetailInput(BaseModel):
    day_of_month: Optional[List[Optional[Int]]] = None
    day_of_week: Optional[List[Optional[Int]]] = None
    expense_id: Optional[ID] = None
    frequency_id: ID
    income_id: Optional[ID] = None
    special_day: Optional[String] = None
    user_id: ID
    week_of_month: Optional[List[Optional[Int]]] = None
    typename__: Optional[Literal['CreateFrequencyDetailInput']] = Field(
        'CreateFrequencyDetailInput', alias='__typename'
    )


class CreateFrequencyInput(BaseModel):
    callback_func_name: String
    day_of_month: String
    day_of_week: Optional[String] = None
    description: String
    interval: Int
    special_day: Optional[String] = None
    week_of_month: Optional[String] = None
    typename__: Optional[Literal['CreateFrequencyInput']] = Field(
        'CreateFrequencyInput', alias='__typename'
    )


class CreateImportFileInput(BaseModel):
    account_nickname: Optional[String] = None
    file_path: String
    has_account_column: Boolean
    user_id: ID
    typename__: Optional[Literal['CreateImportFileInput']] = Field(
        'CreateImportFileInput', alias='__typename'
    )


class CreateIncomeInput(BaseModel):
    account_id: ID
    description: String
    end_date: Optional[String] = None
    frequency_id: ID
    num_hours: Optional[Int] = None
    rate_per_hour: Optional[Float] = None
    salary_amount: Optional[Float] = None
    set_amount: Optional[Float] = None
    start_date: String
    user_id: ID
    typename__: Optional[Literal['CreateIncomeInput']] = Field(
        'CreateIncomeInput', alias='__typename'
    )


class CreateTransactionMatchInput(BaseModel):
    amount_matched: Optional[Float] = None
    bank_transaction_id: String
    expense_id: ID
    income_id: ID
    match_date: String
    user_id: ID
    typename__: Optional[Literal['CreateTransactionMatchInput']] = Field(
        'CreateTransactionMatchInput', alias='__typename'
    )


class CreateUserInput(BaseModel):
    email: String
    google_id: Optional[String] = None
    name: String
    password: String
    typename__: Optional[Literal['CreateUserInput']] = Field(
        'CreateUserInput', alias='__typename'
    )


class UpdateAccountInput(BaseModel):
    account_bank_name: Optional[String] = None
    bank_url: Optional[String] = None
    beg_balance: Optional[Float] = None
    goal_date: Optional[String] = None
    is_active: Boolean
    nickname: Optional[String] = None
    target_goal: Optional[Float] = None
    track_spending: Boolean
    typename__: Optional[Literal['UpdateAccountInput']] = Field(
        'UpdateAccountInput', alias='__typename'
    )


class UpdateBankTransactionInput(BaseModel):
    account_id: ID
    amount: Float
    date: String
    default_category: Optional[String] = None
    description1: String
    description2: Optional[String] = None
    description3: Optional[String] = None
    description4: Optional[String] = None
    typename__: Optional[Literal['UpdateBankTransactionInput']] = Field(
        'UpdateBankTransactionInput', alias='__typename'
    )


class UpdateColumnMappingInput(BaseModel):
    column_name: String
    import_file_id: ID
    mapped_to: ColumnMappingType
    typename__: Optional[Literal['UpdateColumnMappingInput']] = Field(
        'UpdateColumnMappingInput', alias='__typename'
    )


class UpdateExpenseInput(BaseModel):
    amount: Float
    end_date: String
    frequency_id: ID
    from_account_id: ID
    next_due_date: String
    pay_to: String
    plan_account_id: ID
    plan_frequency_id: ID
    plan_income_id: ID
    start_date: String
    to_account_id: ID
    typename__: Optional[Literal['UpdateExpenseInput']] = Field(
        'UpdateExpenseInput', alias='__typename'
    )


class UpdateFrequencyDetailInput(BaseModel):
    day_of_month: Optional[List[Optional[Int]]] = None
    day_of_week: Optional[List[Optional[Int]]] = None
    expense_id: Optional[ID] = None
    frequency_id: ID
    income_id: Optional[ID] = None
    special_day: Optional[String] = None
    week_of_month: Optional[List[Optional[Int]]] = None
    typename__: Optional[Literal['UpdateFrequencyDetailInput']] = Field(
        'UpdateFrequencyDetailInput', alias='__typename'
    )


class UpdateFrequencyInput(BaseModel):
    callback_func_name: String
    day_of_month: String
    day_of_week: Optional[String] = None
    description: String
    interval: Int
    special_day: Optional[String] = None
    week_of_month: Optional[String] = None
    typename__: Optional[Literal['UpdateFrequencyInput']] = Field(
        'UpdateFrequencyInput', alias='__typename'
    )


class UpdateImportFileInput(BaseModel):
    account_nickname: Optional[String] = None
    file_path: String
    has_account_column: Boolean
    typename__: Optional[Literal['UpdateImportFileInput']] = Field(
        'UpdateImportFileInput', alias='__typename'
    )


class UpdateIncomeInput(BaseModel):
    account_id: ID
    description: String
    end_date: Optional[String] = None
    frequency_id: ID
    num_hours: Optional[Int] = None
    rate_per_hour: Optional[Float] = None
    salary_amount: Optional[Float] = None
    set_amount: Optional[Float] = None
    start_date: String
    typename__: Optional[Literal['UpdateIncomeInput']] = Field(
        'UpdateIncomeInput', alias='__typename'
    )


class UpdateTransactionMatchInput(BaseModel):
    amount_matched: Optional[Float] = None
    bank_transaction_id: String
    expense_id: ID
    income_id: ID
    match_date: String
    typename__: Optional[Literal['UpdateTransactionMatchInput']] = Field(
        'UpdateTransactionMatchInput', alias='__typename'
    )


class UpdateUserInput(BaseModel):
    name: Optional[String] = None
    typename__: Optional[Literal['UpdateUserInput']] = Field(
        'UpdateUserInput', alias='__typename'
    )
